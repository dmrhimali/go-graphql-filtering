package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/dmrhimali/go-graphql-filtering/graph/model"
	database "github.com/dmrhimali/go-graphql-filtering/internal/db"
)

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, postID string) (*model.Post, error) {
	var resultPost *model.Post
	resultPost, err := database.GetPost(postID)
	if err != nil {
		return nil, err
	}
	return resultPost, nil
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context, filter *model.PostFilter, order *model.PostOrder) ([]*model.Post, error) {
	resultPosts, err := database.GetPosts(filter, order)
	if err != nil {
		return nil, err
	}
	return resultPosts, nil
}

// AggregatePost is the resolver for the aggregatePost field.
func (r *queryResolver) AggregatePost(ctx context.Context, filter *model.PostFilter) (*model.PostAggregateResult, error) {
	aggregatePosts, err := database.GetAggregatePosts(filter)
	if err != nil {
		return nil, err
	}
	return aggregatePosts, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
