//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuthorPost = newAuthorPostTable("posts", "Author_Post", "")

type authorPostTable struct {
	mysql.Table

	// Columns
	AuthorID mysql.ColumnInteger
	PostID   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuthorPostTable struct {
	authorPostTable

	NEW authorPostTable
}

// AS creates new AuthorPostTable with assigned alias
func (a AuthorPostTable) AS(alias string) *AuthorPostTable {
	return newAuthorPostTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorPostTable with assigned schema name
func (a AuthorPostTable) FromSchema(schemaName string) *AuthorPostTable {
	return newAuthorPostTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthorPostTable with assigned table prefix
func (a AuthorPostTable) WithPrefix(prefix string) *AuthorPostTable {
	return newAuthorPostTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthorPostTable with assigned table suffix
func (a AuthorPostTable) WithSuffix(suffix string) *AuthorPostTable {
	return newAuthorPostTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthorPostTable(schemaName, tableName, alias string) *AuthorPostTable {
	return &AuthorPostTable{
		authorPostTable: newAuthorPostTableImpl(schemaName, tableName, alias),
		NEW:             newAuthorPostTableImpl("", "new", ""),
	}
}

func newAuthorPostTableImpl(schemaName, tableName, alias string) authorPostTable {
	var (
		AuthorIDColumn = mysql.IntegerColumn("author_id")
		PostIDColumn   = mysql.IntegerColumn("post_id")
		allColumns     = mysql.ColumnList{AuthorIDColumn, PostIDColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return authorPostTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AuthorID: AuthorIDColumn,
		PostID:   PostIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
