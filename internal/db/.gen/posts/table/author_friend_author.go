//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AuthorFriendAuthor = newAuthorFriendAuthorTable("posts", "Author_Friend_Author", "")

type authorFriendAuthorTable struct {
	mysql.Table

	// Columns
	AuthorID       mysql.ColumnInteger
	FriendAuthorID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type AuthorFriendAuthorTable struct {
	authorFriendAuthorTable

	NEW authorFriendAuthorTable
}

// AS creates new AuthorFriendAuthorTable with assigned alias
func (a AuthorFriendAuthorTable) AS(alias string) *AuthorFriendAuthorTable {
	return newAuthorFriendAuthorTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthorFriendAuthorTable with assigned schema name
func (a AuthorFriendAuthorTable) FromSchema(schemaName string) *AuthorFriendAuthorTable {
	return newAuthorFriendAuthorTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthorFriendAuthorTable with assigned table prefix
func (a AuthorFriendAuthorTable) WithPrefix(prefix string) *AuthorFriendAuthorTable {
	return newAuthorFriendAuthorTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthorFriendAuthorTable with assigned table suffix
func (a AuthorFriendAuthorTable) WithSuffix(suffix string) *AuthorFriendAuthorTable {
	return newAuthorFriendAuthorTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthorFriendAuthorTable(schemaName, tableName, alias string) *AuthorFriendAuthorTable {
	return &AuthorFriendAuthorTable{
		authorFriendAuthorTable: newAuthorFriendAuthorTableImpl(schemaName, tableName, alias),
		NEW:                     newAuthorFriendAuthorTableImpl("", "new", ""),
	}
}

func newAuthorFriendAuthorTableImpl(schemaName, tableName, alias string) authorFriendAuthorTable {
	var (
		AuthorIDColumn       = mysql.IntegerColumn("author_id")
		FriendAuthorIDColumn = mysql.IntegerColumn("friend_author_id")
		allColumns           = mysql.ColumnList{AuthorIDColumn, FriendAuthorIDColumn}
		mutableColumns       = mysql.ColumnList{}
	)

	return authorFriendAuthorTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AuthorID:       AuthorIDColumn,
		FriendAuthorID: FriendAuthorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
